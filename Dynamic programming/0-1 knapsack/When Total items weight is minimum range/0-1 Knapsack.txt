#include<bits/stdc++.h>
typedef long long int   ll;
typedef long int   l;
typedef long double     ld;

#define pii pair<long long int,long long int>
#define intmax  INT_MAX
#define endl        "\n"
#define READ(x)     freopen(x,"r",stdin)
#define WRITE(x)    freopen(x,"w",stdout)
#define sl(x) scanf("%lld", &x)
#define pl(x) printf("%lld", x)
#define BOOST       ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
// for(auto i:v)
#define MAX_LIMIT 1000000
#define mem(a,b)        memset(a,b,sizeof(a))
#define pb              push_back
#define gcd(a, b)       __gcd(a, b)
#define vsorti(v)         sort(v.begin(),v.end())
#define vsortd(v)         sort(v.begin(), v.end(), greater<long long int>());
#define asortd(a,n)       sort(a+1,a+1+n, greater<long long int>());
#define asorti(a,n)       sort(a+1,a+1+n)
#define fo(n)             for(int i=1;i<=n;i++)

using namespace std;
ll n,w;
ll dp[105][100009];
ll price[105],weight[105];
ll myrecur(ll posi,ll totalweight)
{
   if(posi==n+1) return 0;

   ll x,y;
   if(dp[posi+1][totalweight]!=-1) x=dp[posi+1][totalweight];
   else x=myrecur(posi+1,totalweight);

   if(totalweight+weight[posi]>w) y=0;
   else
       if(dp[posi+1][totalweight+weight[posi]]!=-1) y=price[posi]+dp[posi+1][totalweight+weight[posi]];
       else y=price[posi]+myrecur(posi+1,totalweight+weight[posi]);


   return dp[posi][totalweight]=max(x,y);
}

int main()
{
       BOOST;
       mem(dp,-1);
       cin>>n>>w;
       for(int i=1;i<=n;i++)
       {
         cin>>weight[i]>>price[i];
       }
       price[0]=0;
       weight[0]=0;
       weight[n+1]=0;
       price[n+1]=0;
       
       cout<<myrecur(1,0)<<endl;
     
     
   
     
      return 0;
}