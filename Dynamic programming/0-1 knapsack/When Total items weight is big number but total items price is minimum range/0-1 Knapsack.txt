#include<bits/stdc++.h>
typedef long long int   ll;
typedef long int   l;
typedef long double     ld;

#define pii pair<long long int,long long int>
#define intmax  INT_MAX
#define endl        "\n"
#define READ(x)     freopen(x,"r",stdin)
#define WRITE(x)    freopen(x,"w",stdout)
#define sl(x) scanf("%lld", &x)
#define pl(x) printf("%lld", x)
#define BOOST       ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
// for(auto i:v)
#define MAX_LIMIT 1000000
#define mem(a,b)        memset(a,b,sizeof(a))
#define pb              push_back
#define gcd(a, b)       __gcd(a, b)
#define vsorti(v)         sort(v.begin(),v.end())
#define vsortd(v)         sort(v.begin(), v.end(), greater<long long int>());
#define asortd(a,n)       sort(a+1,a+1+n, greater<long long int>());
#define asorti(a,n)       sort(a+1,a+1+n)
#define fo(n)             for(int i=1;i<=n;i++)

using namespace std;
ll n,w;
ll dp[109][100009];
ll price[109],weight[109];
ll myrecur(ll posi,ll bakiPrice)
{
   if(posi==n+1)
     if(bakiPrice!=0)
       return 10000000000;
     else 
      return 0;

   ll x,y;
   //select korbo na
   if(dp[posi+1][bakiPrice]!=-1) x=dp[posi+1][bakiPrice];
   else x=myrecur(posi+1,bakiPrice);
   // select korbo
   if(bakiPrice-price[posi]>=0)
     if(dp[posi+1][bakiPrice-price[posi]]!=-1) y=weight[posi]+dp[posi+1][bakiPrice-price[posi]];
     else y=weight[posi]+myrecur(posi+1,bakiPrice-price[posi]);

   else y=10000000000;

   return dp[posi][bakiPrice]=min(x,y);
}

int main()
{
       BOOST;
       mem(dp,-1);
       ll sum=0;
       cin>>n>>w;
       for(int i=1;i<=n;i++)
       {
         cin>>weight[i]>>price[i];
         sum+=price[i];
       }

       for(int i=sum;i>=0;i--)
       {
         if(myrecur(1,i)<=w)
         {
           cout<<i<<endl;
           break;
         }
       }
      
     
     
   
     
      return 0;
}