#include<bits/stdc++.h>
typedef long long  ll;
typedef long int   l;
typedef long double     ld;

#define pii pair<long long int,long long int>
#define intmax  INT_MAX
#define endl        "\n"
#define READ(x)     freopen(x,"r",stdin)
#define WRITE(x)    freopen(x,"w",stdout)
#define sl(x) scanf("%lld", &x)
#define pl(x) printf("%lld", x)
#define BOOST       ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
// for(auto i:v)
#define MAX_LIMIT 1000000
#define mem(a,b)        memset(a,b,sizeof(a))
#define pb              push_back
#define gcd(a, b)       __gcd(a, b)
#define vsorti(v)         sort(v.begin(),v.end())
#define vsortd(v)         sort(v.begin(), v.end(), greater<long long int>());
#define asortd(a,n)       sort(a+1,a+1+n, greater<long long int>());
#define asorti(a,n)       sort(a+1,a+1+n)

using namespace std;
vector<int>primes;
bitset<100000006>status;
ll power(ll p, ll q)
{
   if(q==0)
   {
       return 1;
   }
   else if(q==1)
   {
       return p;
   }
   else
   {
       ll ans=1;
       while(q--)
       {
          ans*=p;
       }
       return ans;
   }
}
void findprime(int n)
{
    //status.set();
    status.set();
    status[0]=false;
    status[1]=false;
   ll i,j;
    primes.pb(2);
    for(  i=3;i*i<=n;i+=2)
    {
       if(status[i])
       {
         //primes.pb(i);
         for(  j=i*i;j<=n;j+=i+i)
         {
            status[j]=false;
         }
       }
    }
    for(i=3;i<=n;i+=2)
    {
       if(status[i]==true)
       {
          primes.pb(i);
       }
    }
}
int main()
{

     
     BOOST;
     findprime(100000006);
     int q;
     cin>>q;
     while(q--)
     {
        ll n,c=0,sum=1,n1;
        int i;
        cin>>n;
        n1=n;
        for(i=0;i<primes.size() and primes[i]*primes[i]<=n;i++)
        {
           
           if(n%primes[i]==0)
           {
             c=0;
             while(n%primes[i]==0)
             {
                c++;
                n/=primes[i];
             }
             sum=sum*(((power(primes[i],c+1))-1)/(primes[i]-1));
           }
        }
        if(n>1)
        {
             sum=sum*((n+1));
        }
        cout<<sum-n1;
        cout<<endl;
     }
      return 0;
}