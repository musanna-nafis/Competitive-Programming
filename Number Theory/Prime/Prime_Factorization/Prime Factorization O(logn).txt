#include<bits/stdc++.h>
typedef long long int   ll;
typedef long int   l;
typedef long double     ld;

#define pii pair<long long int,long long int>
#define intmax  INT_MAX
#define endl        "\n"
#define READ(x)     freopen(x,"r",stdin)
#define WRITE(x)    freopen(x,"w",stdout)
#define sl(x) scanf("%lld", &x)
#define pl(x) printf("%lld", x)
#define BOOST       ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
// for(auto i:v)
#define MAX_LIMIT 1000000
#define mem(a,b)        memset(a,b,sizeof(a))
#define pb              push_back
#define gcd(a, b)       __gcd(a, b)
#define vsorti(v)         sort(v.begin(),v.end())
#define vsortd(v)         sort(v.begin(), v.end(), greater<long long int>());
#define asortd(a,n)       sort(a+1,a+1+n, greater<long long int>());
#define asorti(a,n)       sort(a+1,a+1+n)

using namespace std;

ll lowestPrime[1000000];
bool status[1000000]={false};
void Prime_factor(ll n)
{
   //lowestPrime[1]=1;
   lowestPrime[2]=2;
   for(int i=4;i<=n;i+=2)
   {
     lowestPrime[i]=2;
     status[i]=true;
   }

  for(int i=3;i<=n;i+=2)
  {

    if(status[i]==false)
    {
      lowestPrime[i]=i;
      for(int k=3*i;k<=n;k+=i+i)
      {
          if(status[k]==false)
          {
            lowestPrime[k]=i;
            status[k]=true;
          }
      } 

    }
     
  }

}
int main()
{

     
     BOOST;
     ll n;
     cin>>n;
     Prime_factor(n);

     //query for find out a number prime factor
     ll q;
     cin>>q;
     while(q--)
     {
       ll number;
       cin>>number;
       if(status[number]==false)
       {
         cout<<"It is a prime number"<<endl;
         continue;
       }
       map<ll,ll>prime_factors;
       while(1)
       {
         if(number<=1)
         {
           //prime_factors[1]++;
           break;
         }
         prime_factors[lowestPrime[number]]++;
         number/=lowestPrime[number];
       }
       ll x,y;
       for(auto ok: prime_factors)
       {
         x=ok.first;
         y=ok.second;
         for(int i=1;i<=y;i++)
         {
           cout<<x<<" ";
         }
       }

       cout<<endl;
     }
   
     
      return 0;
}